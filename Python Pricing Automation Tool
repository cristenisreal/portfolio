# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns

# Load data
data = pd.read_csv('consumer_debt_data.csv')

# Data cleaning
data.dropna(inplace=True)  # Remove missing values
data = data[data['loan_amount'] > 0]  # Remove invalid loan amounts

# Feature engineering
data['interest_rate'] = data['interest_rate'] / 100  # Convert percentage to decimal
data['income_to_debt_ratio'] = data['annual_income'] / data['total_debt']

# Define features and target variable
features = data[['loan_amount', 'credit_score', 'income_to_debt_ratio', 'loan_term']]
target = data['interest_rate']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Visualize the results
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel('Actual Interest Rates')
plt.ylabel('Predicted Interest Rates')
plt.title('Actual vs Predicted Interest Rates')
plt.show()

# Pricing Optimization Function
def optimize_pricing(loan_amount, credit_score, annual_income, loan_term):
    # Calculate income to debt ratio
    income_to_debt_ratio = annual_income / (loan_amount + annual_income * 0.2)  # Assuming 20% debt
    # Create feature array
    features = np.array([[loan_amount, credit_score, income_to_debt_ratio, loan_term]])
    # Predict optimal interest rate
    optimal_rate = model.predict(features)[0]
    return optimal_rate

# Example usage
loan_amount = 10000
credit_score = 720
annual_income = 60000
loan_term = 36

optimal_rate = optimize_pricing(loan_amount, credit_score, annual_income, loan_term)
print(f'Optimal Interest Rate for the given parameters: {optimal_rate:.2f}%')

# Save the model for future use
import joblib
joblib.dump(model, 'pricing_model.pkl')

# Load the model
# model = joblib.load('pricing_model.pkl')

# Documentation
"""
Pricing Automation Tool:

1. Data Loading:
   - The script loads consumer debt data from a CSV file.
   - It includes fields such as loan amount, credit score, annual income, total debt, loan term, and interest rate.

2. Data Cleaning:
   - The script removes missing values and invalid loan amounts.
   - It ensures data consistency and quality for accurate model training.

3. Feature Engineering:
   - Converts interest rate percentages to decimals.
   - Calculates the income-to-debt ratio to assess borrower risk.

4. Model Training:
   - Splits the dataset into training and testing sets.
   - Trains a linear regression model to predict interest rates.

5. Model Evaluation:
   - Predicts interest rates on the test set and calculates mean squared error (MSE).
   - Visualizes the comparison between actual and predicted interest rates.

6. Pricing Optimization Function:
   - Calculates the optimal interest rate based on the loan amount, credit score, annual income, and loan term.

7. Model Saving:
   - Saves the trained model for future predictions.
   - The model can be loaded for real-time pricing automation.

8. Example Usage:
   - Demonstrates how to use the tool with sample input parameters.

This tool helps automate and optimize the pricing process for consumer debt financing deals, ensuring efficient and accurate pricing decisions.
"""
